/** THIS IS AN AUTOMATICALLY GENERATED FILE.
 *  DO NOT MODIFY BY HAND!!
 *
 *  Generated by zcm-gen
 **/

#include <zcm/zcm_coretypes.h>

#ifndef __SCU_CAN_STS_hpp__
#define __SCU_CAN_STS_hpp__



class SCU_CAN_STS
{
    public:
        int8_t     LngCtrlMode;

        int32_t    LngAutoCheckReport;

        int32_t    LngQuitReport;

        int8_t     GearLeverIntv;

        int8_t     BrkPedalSt;

        int16_t    ActVehWheelTorq;

        int16_t    VehWheelTorqMax;

        float      GasPedalAcPst;

        int8_t     AccElecECFail;

        int8_t     VehRdySt;

        int8_t     VehDrvMod;

        int8_t     VehRng;

        int8_t     CrntGearLvl;

        float      VehSpd;

        int8_t     ABSActiveSt;

        int8_t     CDDAvailable;

        int8_t     AEBAvailable;

        int8_t     CDDFail;

        int8_t     CDDActive;

        int8_t     AEBActive;

        int8_t     VehicleStandStillSt;

        float      ActVehLongAccel;

        float      VehLongAccelOffset;

        int8_t     SysSt;

        int8_t     SwitchSt;

        int8_t     FailSt;

        int8_t     LatCtrlMode;

        int32_t    LatAutoCheckReport;

        int32_t    LatQuitReport;

        int8_t     StrngWhlIntv;

        float      SteeringAngle;

        int8_t     SteeringAngleVD;

        int8_t     SteeringAngleSpd;

        int8_t     SteeringAngleSpdVD;

        float      StrngWhlTorq;

        int8_t     StrngWhlTorqVD;

        int8_t     WarnLamp;

        float      ActVeLaltrlAccel;

        float      VehLaltrlAccelOffset;

        float      YawRate;

        float      YawRateOffset;

    public:
        /**
         * Destructs a message properly if anything inherits from it
        */
        virtual ~SCU_CAN_STS() {}

        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void* buf, uint32_t offset, uint32_t maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline uint32_t getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to read while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void* buf, uint32_t offset, uint32_t maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "SCU_CAN_STS"
         */
        inline static const char* getTypeName();

        // ZCM support functions. Users should not call these
        inline int      _encodeNoHash(void* buf, uint32_t offset, uint32_t maxlen) const;
        inline uint32_t _getEncodedSizeNoHash() const;
        inline int      _decodeNoHash(const void* buf, uint32_t offset, uint32_t maxlen);
        inline static uint64_t _computeHash(const __zcm_hash_ptr* p);
};

int SCU_CAN_STS::encode(void* buf, uint32_t offset, uint32_t maxlen) const
{
    uint32_t pos = 0;
    int thislen;
    int64_t hash = (int64_t)getHash();

    thislen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int SCU_CAN_STS::decode(const void* buf, uint32_t offset, uint32_t maxlen)
{
    uint32_t pos = 0;
    int thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

uint32_t SCU_CAN_STS::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t SCU_CAN_STS::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* SCU_CAN_STS::getTypeName()
{
    return "SCU_CAN_STS";
}

int SCU_CAN_STS::_encodeNoHash(void* buf, uint32_t offset, uint32_t maxlen) const
{
    uint32_t pos_byte = 0;
    int thislen;

    thislen = __int8_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->LngCtrlMode, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int32_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->LngAutoCheckReport, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int32_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->LngQuitReport, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->GearLeverIntv, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->BrkPedalSt, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int16_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->ActVehWheelTorq, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int16_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->VehWheelTorqMax, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __float_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->GasPedalAcPst, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->AccElecECFail, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->VehRdySt, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->VehDrvMod, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->VehRng, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->CrntGearLvl, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __float_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->VehSpd, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->ABSActiveSt, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->CDDAvailable, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->AEBAvailable, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->CDDFail, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->CDDActive, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->AEBActive, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->VehicleStandStillSt, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __float_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->ActVehLongAccel, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __float_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->VehLongAccelOffset, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->SysSt, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->SwitchSt, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->FailSt, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->LatCtrlMode, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int32_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->LatAutoCheckReport, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int32_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->LatQuitReport, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->StrngWhlIntv, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __float_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->SteeringAngle, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->SteeringAngleVD, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->SteeringAngleSpd, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->SteeringAngleSpdVD, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __float_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->StrngWhlTorq, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->StrngWhlTorqVD, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->WarnLamp, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __float_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->ActVeLaltrlAccel, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __float_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->VehLaltrlAccelOffset, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __float_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->YawRate, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __float_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->YawRateOffset, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    return pos_byte;
}

int SCU_CAN_STS::_decodeNoHash(const void* buf, uint32_t offset, uint32_t maxlen)
{
    uint32_t pos_byte = 0;
    int thislen;

    thislen = __int8_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->LngCtrlMode, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int32_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->LngAutoCheckReport, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int32_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->LngQuitReport, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->GearLeverIntv, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->BrkPedalSt, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int16_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->ActVehWheelTorq, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int16_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->VehWheelTorqMax, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __float_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->GasPedalAcPst, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->AccElecECFail, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->VehRdySt, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->VehDrvMod, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->VehRng, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->CrntGearLvl, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __float_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->VehSpd, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->ABSActiveSt, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->CDDAvailable, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->AEBAvailable, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->CDDFail, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->CDDActive, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->AEBActive, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->VehicleStandStillSt, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __float_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->ActVehLongAccel, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __float_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->VehLongAccelOffset, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->SysSt, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->SwitchSt, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->FailSt, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->LatCtrlMode, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int32_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->LatAutoCheckReport, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int32_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->LatQuitReport, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->StrngWhlIntv, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __float_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->SteeringAngle, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->SteeringAngleVD, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->SteeringAngleSpd, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->SteeringAngleSpdVD, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __float_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->StrngWhlTorq, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->StrngWhlTorqVD, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __int8_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->WarnLamp, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __float_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->ActVeLaltrlAccel, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __float_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->VehLaltrlAccelOffset, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __float_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->YawRate, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    thislen = __float_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->YawRateOffset, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    return pos_byte;
}

uint32_t SCU_CAN_STS::_getEncodedSizeNoHash() const
{
    uint32_t enc_size = 0;
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    return enc_size;
}

uint64_t SCU_CAN_STS::_computeHash(const __zcm_hash_ptr*)
{
    uint64_t hash = (uint64_t)0x7016131faf764e2eLL;
    return (hash<<1) + ((hash>>63)&1);
}

#endif
